global:
  dynamic:
    # -- Array of YAML files listing dynamic plugins to include with those listed in the `plugins` field.
    # Relative paths are resolved from the working directory of the initContainer that will install the plugins (`/opt/app-root/src`).
    includes:
      - dynamic-plugins.default.yaml
    plugins:
      - disabled: false
        package: ./dynamic-plugins/dist/immobiliarelabs-backstage-plugin-gitlab-backend-dynamic
      - disabled: false
        package: ./dynamic-plugins/dist/immobiliarelabs-backstage-plugin-gitlab
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-plugin-catalog-backend-module-gitlab-dynamic
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-plugin-scaffolder-backend-module-gitlab-dynamic
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-plugin-kubernetes-backend-dynamic
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-plugin-kubernetes
      - disabled: false
        package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-topology
      - disabled: false
        package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd-backend-dynamic
      - disabled: false
        package: ./dynamic-plugins/dist/roadiehq-scaffolder-backend-argocd-dynamic
      - disabled: false
        package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd
      - disabled: false
        package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-ocm
      - disabled: false
        package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-ocm-backend-dynamic
      - disabled: false
        package: ./dynamic-plugins/dist/roadiehq-scaffolder-backend-module-utils-dynamic
      - disabled: false
        package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-keycloak-backend-dynamic
      - disabled: false
        package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-tekton
        pluginConfig:
          dynamicPlugins:
            frontend:
              janus-idp.backstage-plugin-tekton:
                mountPoints:
                - config:
                    if:
                      allOf:
                      - isTektonCIAvailable
                    layout:
                      gridColumn: 1 / -1
                      gridRowStart: 1
                  importName: TektonCI
                  mountPoint: entity.page.ci/cards

  # -- Shorthand for users who do not want to specify a custom HOSTNAME. Used ONLY with the DEFAULT upstream.backstage.appConfig value and with OCP Route enabled.
  clusterRouterBase:  "{{ .Values.app.baseUrl  }}"
  # -- Custom hostname shorthand, overrides `global.clusterRouterBase`, `upstream.ingress.host`, `route.host`, and url values in `upstream.backstage.appConfig`.
  # If neither `global.clusterRouterBase` nor `global.host` are set, the helm chart will attempt to autofill with the hostname of the [OCP Ingress configuration](https://access.redhat.com/documentation/en-us/openshift_container_platform/4.14/html/networking/configuring-ingress#nw-installation-ingress-config-asset_configuring-ingress)
  auth:
    backend:
      enabled: true

# -- Upstream Backstage [chart configuration](https://github.com/backstage/charts/blob/main/charts/backstage/values.yaml)
# @default -- Use Openshift compatible settings
upstream:
  nameOverride: rh-developer-hub
  backstage:
    image:
      registry: "{{ .Values.image.registry }}"
      repository: "{{ .Values.image.repository }}"
      tag: '{{ .Values.image.tag }}'
      pullSecrets:
      - redhat-gpte-devhub-pull-secret
    extraEnvVars:
      - name: APP_CONFIG_backend_listen_port
        value: '7007'
      - name: POSTGRES_HOST
        valueFrom:
          secretKeyRef:
            name: developer-hub-postgresql
            key: databaseHost
      - name: POSTGRES_PORT
        valueFrom:
          secretKeyRef:
            name: developer-hub-postgresql
            key: databasePort
      - name: POSTGRES_USER
        valueFrom:
          secretKeyRef:
            name: developer-hub-postgresql
            key: databaseUser
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: developer-hub-postgresql
            key: databasePassword
      - name: POSTGRESQL_ADMIN_PASSWORD
        valueFrom:
          secretKeyRef:
            name: developer-hub-postgresql
            key: databaseAdminPassword
    extraContainers:
      - name: oauth2-proxy
        env:
          - name: OAUTH2_PROXY_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: rhsso.clientId
                name: rhdh-keycloak-creds
          - name: OAUTH2_PROXY_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: rhsso.clientSecret
                name: rhdh-keycloak-creds
          - name: OAUTH2_PROXY_COOKIE_SECRET
            value: "{{ .Values.oauth2Proxy.cookieSecret }}"
          - name: OAUTH2_PROXY_OIDC_ISSUER_URL
            value: "{{ .Values.oauth2Proxy.issuerUrl }}"
          - name: OAUTH2_PROXY_SSL_INSECURE_SKIP_VERIFY
            value: 'true'
        ports:
          - name: oauth2-proxy
            containerPort: 4180
            protocol: TCP
        imagePullPolicy: IfNotPresent
        image: 'quay.io/oauth2-proxy/oauth2-proxy:latest'
        args:
          - '--provider=oidc'
          - '--email-domain=*'
          - '--upstream=http://localhost:7007'
          - '--http-address=0.0.0.0:4180'
          - '--skip-provider-button'
          - '--insecure-oidc-allow-unverified-email=true'          
 
    appConfig:
      backend:
        baseUrl: "{{ .Values.backend.baseUrl }}"
        cors:
          credentials: true
          origin: "{{ .Values.backend.cors.origin }}"
        database:
          connection:
            password: "{{ .Values.postgresql.databaseAdminPassword }}"
            user: "{{ .Values.postgresql.databaseAdminUser }}"
          reading:
            allow:
              - host: "{{ .Values.backend.reading.allow.host }}"
      integrations:
        gitlab:
        - host: "{{ .Values.integrations.gitlab[0].host}}"
          baseUrl: "{{ .Values.integrations.gitlab[0].baseUrl }}"
          apiBaseUrl: "{{ .Values.integrations.gitlab[0].apiBaseUrl }}"
          token: "{{ .Values.integrations.gitlab[0].token }}"

      proxy:
        '/developer-hub':
          target: https://raw.githubusercontent.com/
          pathRewrite:
            '^/api/proxy/developer-hub': /redhat-gpte-devopsautomation/agnosticd_workload_helm_charts/main/rhdh/json/rhdh_home.json
          secure: false
          changeOrigin: true

      auth:
        environment: production
        providers:
          oauth2Proxy: {}

      signInPage: oauth2Proxy

      scaffolder:
        # see https://backstage.io/docs/features/software-templates/configuration for software template options
      catalog:
        rules:
          - allow: [Component, System, API, Resource, Location, Template]
        locations:
          - target: "{{ .Values.catalog.softwareTemplates}}"
            type: url
            rules:
              - allow: [Template]
        providers:
          gitlab:
            selfHosted:
              host: "{{ .Values.integrations.gitlab[0].host }}"
              schedule: # optional; same options as in TaskScheduleDefinition
                # supports cron, ISO duration, "human duration" as used in code
                frequency: { seconds: 10 }
                # supports ISO duration, "human duration" as used in code
                timeout: { seconds: 60 }
          ocm:
            default:
              name: multiclusterhub
              kubernetesPluginRef: dev-cluster
              schedule: # optional; same options as in TaskScheduleDefinition
                # supports cron, ISO duration, "human duration" as used in code
                frequency: { seconds: 10 }
                # supports ISO duration, "human duration" as used in code
                timeout: { seconds: 60 }
              owner: group:rhdh
          keycloakOrg:
            default:
                baseUrl: "https://keycloak-rhsso.{{ .Values.app.baseUrl }}/auth"
                loginRealm: "{{ .Values.oauth2Proxy.realm }}"
                realm: "{{ .Values.oauth2Proxy.realm }}"
                clientId: "{{ .Values.oauth2Proxy.clientId }}"
                clientSecret: "{{ .Values.oauth2Proxy.clientSecret }}"

      argocd:
        appLocatorMethods:
          - type: 'config'
            instances:
              - name: main
                url: https://{{ .Values.argocd.appLocatorMethods[0].instances[0].url }}
                username: admin
                password: "{{ .Values.argocd.appLocatorMethods[0].instances[0].token }}"

      kubernetes:
        serviceLocatorMethod:
          type: "multiTenant"
        clusterLocatorMethods:
          - type: "config"
            clusters:
              - name: dev-cluster
                url: "{{ .Values.clusters[0].url }}"
                authProvider: "serviceAccount"
                skipTLSVerify: true
                serviceAccountToken: "{{ .Values.clusters[0].serviceAccountToken }}"
        customResources:
          - group: 'tekton.dev'
            apiVersion: 'v1beta1'
            plural: 'pipelineruns'
          - group: 'tekton.dev'
            apiVersion: 'v1beta1'
            plural: 'taskruns'
          - group: 'route.openshift.io'
            apiVersion: 'v1'
            plural: 'routes'

      permission:
        enabled: false

      enabled:
        kubernetes: true
        github: false
        argocd: true
        githubOrg: false
        techdocs: false
        ocm: true
        gitlab: true
        keycloak: true

  postgresql:
    enabled: true
    database: backstage
    postgresqlDataDir: /var/lib/pgsql/data/userdata
    auth:
      username: "{{ .Values.postgresql.databaseUser }}"
      database: backstage
      existingSecret: rhdh-postgresql
      secretKeys:
        userPasswordKey: postgres-password
    image:
      registry: registry.redhat.io
      repository: rhel9/postgresql-13
      tag: 1-73
    primary:
      securityContext:
        enabled: false
      podSecurityContext:
        enabled: false
      containerSecurityContext:
        enabled: false
      persistence:
        enabled: true
        mountPath: /var/lib/pgsql/data
      extraEnvVars:
        - name: POSTGRESQL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-password
              name: developer-hub-postgresql
              
  service:
    ports:
      backend: 4180
      targetPort: oauth2-proxy
  
  serviceAccount: default